# Consultas para obtener información
type Query {
    getAllFlights: [Flight!]!
    getFlightById(id: ID!): Flight
    searchFlights(
        originName: String!,
        destinationName: String!,
        passengerAmount: Int!,
        departureDate: String,
        arrivalDate: String,
        minimumPrice: Float,
        maximumPrice: Float,
        minimumDate: String,
        maximumDate: String,
        minimumTime: String,
        maximumTime: String,
        orderByDepartureDateAsc: Boolean,
        orderByPriceAsc: Boolean): [Flight]
    searchRoundTrip(
        originName: String!,
        destinationName: String!,
        passengerAmount: Int!,
        departureDate: String!,
        arrivalDate: String!): [[Flight]]
}

# Mutaciones para crear, actualizar y eliminar
type Mutation {
    createFlight(
        flightNumber: String!,
        originId: Int!,
        destinationId: Int!,
        departureDateTime: String!,
        arrivalDateTime: String!,
        planeId: Int!,
        price: Float!,
        taxPercentage: Float!,
        surchargePercentage: Float!,
        isCanceled: Boolean!,
        sellSeats: Int
    ): Flight

    updateFlight(
        id: ID!,
        flightNumber: String!,
        originId: Int,
        destinationId: Int,
        departureDateTime: String,
        arrivalDateTime: String,
        planeId: Int,
        price: Float,
        taxPercentage: Float,
        surchargePercentage: Float,
        isCanceled: Boolean,
        sellSeats: Int
    ): Flight!

    deleteFlight(id: ID!): Boolean!
}

# Definición de tipos
type Airport {
    airportId: ID!
    city: City!
    iataCode: String!
    nameAirport: String!
}

type City {
    cityId: ID!
    nameCity: String!
    state: String!
    country: String!
}

type Flight {
    flightId: ID!
    flightNumber: String!
    origin: Airport!
    destination: Airport!
    departureDate: String!
    arrivalDate: String!
    plane: Plane!
    price: Float!
    taxPercentage: Float!
    surchargePercentage: Float!
    isCanceled: Boolean!
    sellSeats: Int
}

type Plane {
    planeId: ID!
    model: String!
    seatCapacity: Float!
    seatDistribution: String!
}

type Scale {
    scaleId: ID!
    flight: Flight!
    airport: Airport!
    departureDate: String!
    arrivalDate: String!
    plane: Plane!
    scaleOrder: Float!
}

type Account {
    accountId: ID!
    username: String!
}

type ViewedFlight {
    viewId: ID!
    account: Account!
    flight: Flight!
    viewDate: String!
}

type searchHistory {
    searchId: ID!
    account: Account!
    searchDate: String!
    origin: Airport!
    destination: Airport!
    departureDate: String
    arrivalDate: String
    numPassengers: Int
    priceRangeMin: Float
    priceRangeMax: Float
    resultsCount: Int
}